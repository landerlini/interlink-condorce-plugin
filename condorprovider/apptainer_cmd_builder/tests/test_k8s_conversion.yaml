name: hello-world
can_use_fake_volumes: True

pod:
  apiVersion: v1
  kind: Pod
  metadata:
    name: hello-world
  spec:
    containers:
      - name: main
        image: ubuntu:latest
        command:
          - /bin/bash
          - -c
          - echo "hello world"

containers: []

validation:
  inLog:
    - hello world

---

name: cern-vm-fs
can_use_fake_volumes: True

pod:
  apiVersion: v1
  kind: Pod
  metadata:
    name: cern-vm-fs
    annotations:
      cvmfs.vk.io/my-volume: sft.cern.ch
  spec:
    containers:
      - name: main
        image: ubuntu:latest
        command:
          - /bin/bash
          - -c
          - ls /
        volumeMounts:
          - name: my-volume
            mountPath: /cvmfs
            readOnly: True

    volumes:
      - name: my-volume
        persistentVolumeClaim:
          claimName: intentionally-not-existing

containers: []

validation:
  inLog:
    - cvmfs

---

name: hello-world-with-args
can_use_fake_volumes: True

pod:
  apiVersion: v1
  kind: Pod
  metadata:
    name: hello-world-with-args
  spec:
    containers:
      - name: main
        image: ubuntu:latest
        command:
          - echo
        args:
          - "hello world"
          - "world, hello"

containers: []

validation:
  inLog:
    - hello world
    - world, hello

---

name: hello-world-multiline
can_use_fake_volumes: True

pod:
  apiVersion: v1
  kind: Pod
  metadata:
    name: hello-world-multiline
  spec:
    containers:
      - name: main
        image: ubuntu:latest
        command:
          - /bin/bash
          - -c
        args:
          - |
            echo "hello world"
            echo "world, hello"

containers: []

validation:
  inLog:
    - hello world
    - world, hello

---

name: scratch-area
can_use_fake_volumes: True

pod:
  apiVersion: v1
  kind: Pod
  metadata:
    name: scratch-area
  spec:
    containers:
      - name: main
        image: ubuntu:latest
        command:
          - /bin/bash
          - -c
        args:
          - |
            echo "hello world" > /mnt/scratch/hw.txt
            cat /mnt/scratch/hw.txt
        volumeMounts:
          - name: scratch
            mountPath: /mnt/scratch
    volumes:
      - name: scratch
        emptyDir: {}

containers:
  - name: main
  - empty_dirs:
      - scratch

validation:
  inLog:
    - hello world

---

name: empty-dir
can_use_fake_volumes: False

pod:
  apiVersion: v1
  kind: Pod
  metadata:
    name: scratch-area
  spec:
    initContainers:
      - name: write
        image: ubuntu:latest
        command:
          - /bin/bash
          - -c
        args:
          - |
            echo "hello world" > /mnt/scratch/hw.txt
        volumeMounts:
          - name: scratch
            mountPath: /mnt/scratch

    containers:
      - name: main
        image: ubuntu:latest
        command:
          - /bin/bash
          - -c
        args:
          - |
            cat /mnt/scratch/hw.txt
        volumeMounts:
          - name: scratch
            mountPath: /mnt/scratch
    volumes:
      - name: scratch
        emptyDir: {}

containers:
  - name: main
  - empty_dirs:
      - scratch

validation:
  inLog:
    - hello world

---

name: configmap
can_use_fake_volumes: False

pod:
  apiVersion: v1
  kind: Pod
  metadata:
    name: configmap
  spec:
    containers:
      - name: main
        image: ubuntu:latest
        command:
          - /bin/bash
          - -c
        args:
          - |
            cat /configuration/file.txt
        volumeMounts:
          - name: my-cfg
            mountPath: /configuration
    volumes:
      - name: my-cfg
        configMap:
          name: my-cfg
          items:
            - key: file
              path: file.txt


containers:
  - name: main
  - config_maps:
      - metadata:
          name: my-cfg
          namespace: whatever
        data:
          file: |
            hello world

validation:
  inLog:
    - hello world

---

name: secret
can_use_fake_volumes: False

pod:
  apiVersion: v1
  kind: Pod
  metadata:
    name: secret
  spec:
    containers:
      - name: main
        image: ubuntu:latest
        command:
          - /bin/bash
          - -c
        args:
          - |
            cat /configuration/file.txt
        volumeMounts:
          - name: my-scrt
            mountPath: /configuration
    volumes:
      - name: my-scrt
        secret:
          secretName: my-scrt
          items:
            - key: file
              path: file.txt


containers:
  - name: main
  - secrets:
      - metadata:
          name: my-scrt
          namespace: whatever
        stringData:
          file: |
            hello world

validation:
  inLog:
    - hello world

---

name: fuse-vol
can_use_fake_volumes: False

pod:
  apiVersion: v1
  kind: Pod
  metadata:
    name: fuse-vol
    annotations:
      fuse.vk.io/my-fuse-vol: |
        cat << EOS > /tmp/rclone.conf
        [example]
        type = local
        EOS
        
        # Mimic a remote
        mkdir -p /tmp
        echo "hello world" > /tmp/file.txt
        
        # Mount the remote
        rclone mount2 \
          --config /tmp/rclone.conf \
          --allow-non-empty example:/tmp \
          $1

  spec:
    containers:
      - name: main
        image: rclone/rclone:latest
        command:
          - cat
        args:
          - /mnt/fuse-vol/file.txt
        volumeMounts:
          - name: my-fuse-vol
            mountPath: /mnt/fuse-vol
    volumes:
      - name: my-fuse-vol
        persistentVolumeClaim:  # deliberately fake pvc
          claimName: csi.example.com

containers: {}

validation:
  inLog:
    - hello world


---

name: loopback-network
can_use_fake_volumes: True

pod:
  apiVersion: v1
  kind: Pod
  metadata:
    name: loopback-network

  spec:
    containers:
      - name: server
        image: python:alpine
        command:
          - /bin/ash
          - -c
        args:
          - |
            cd /mnt
            echo "hello world" > index.html
            timeout 4s python3 -m http.server 7890

      - name: server
        image: python:alpine
        command:
          - /bin/ash
          - -c
        args:
          - |
            sleep 2
            wget http://127.0.0.1:7890/index.html -O output.html
            cat output.html

containers: {}

validation:
  inLog:
    - hello world

