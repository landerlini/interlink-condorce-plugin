apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Values.nodeName }}
  namespace: {{ .Release.Namespace }}

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ .Values.nodeName }}
  namespace: {{ .Release.Namespace }}
rules:
- apiGroups:
  - "coordination.k8s.io"
  resources:
  - leases
  verbs:
  - update
  - create
  - get
  - list
  - watch
  - patch
- apiGroups:
  - ""
  resources:
  - namespaces
  - configmaps
  - secrets
  - services
  - serviceaccounts
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - delete
  - get
  - list
  - watch
  - patch
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - create
  - get
- apiGroups:
  - ""
  resources:
  - nodes/status
  verbs:
  - update
  - patch
- apiGroups:
  - ""
  resources:
  - pods/status
  verbs:
  - update
  - patch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch


---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ .Values.nodeName }}
  namespace: {{ .Release.Namespace }}
subjects:
- kind: ServiceAccount
  name: {{ .Values.nodeName }}
  namespace: {{ .Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{ .Values.nodeName }}


---

apiVersion: v1
data:
  InterLinkConfig.yaml: |
    InterlinkURL: https://{{ .Values.targetHost | required "`targetHost` not set"}}
    {{ if .Values.targetPrefix -}}
    InterlinkPort: {{ .Values.targetPort | default 443 -}}/{{- .Values.targetPrefix }}
    {{ else }}
    InterlinkPort: {{ .Values.targetPort }}
    {{ end -}}
    CommandPrefix: {{ .Values.commandPrefix | default "" | quote }}
    ExportPodData: {{ .Values.exportPodData | default true }}
    ServiceAccount: {{ .Values.serviceAccountName | default "interlink" }}
    Namespace: {{ .Release.Namespace }}
    VKTokenFile: /opt/interlink/token
    VerboseLogging: {{ .Values.verboseLogging | default "true" }}
    cpu: {{ .Values.allocatableCpu | default 1 | quote }}
    memory: {{ .Values.allocatableMemory | default "2Gi" | quote }}
    pods: {{ .Values.allocatablePods | default "10" | quote }}
    nvidia.com/gpu: {{ .Values.allocatableGpus | default "10" | quote }}
kind: ConfigMap
metadata:
  name: "{{ .Values.nodeName }}-config"
  namespace: {{ .Release.Namespace }}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.nodeName }}
  namespace: {{ .Release.Namespace }}
  labels:
    nodeName:  {{ .Values.nodeName }}
spec:
  replicas: 1
  selector:
    matchLabels:
      nodeName:  {{ .Values.nodeName }}
  template:
    metadata:
      labels:
        nodeName:  {{ .Values.nodeName }}
      annotations:
        helmRevision: {{ .Release.Revision | quote }}
    spec:
      #hostNetwork: true
      containers:
      {{ if .Values.enableJaeger }}
        - name: jaeger
          image: jaegertracing/all-in-one:1.51
      {{ end }} 
      - name: inttw-vk
        image: {{ .Values.inttwImage | default "ghcr.io/intertwin-eu/interlink/virtual-kubelet-inttw:latest" }}
        imagePullPolicy: Always
        env:
        - name: NODENAME
          value: {{ .Values.nodeName }}
        - name: KUBELET_PORT
          value: {{ .Values.kubeletPort | default 10250 | quote }}
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: CONFIGPATH
          value: "/etc/interlink/InterLinkConfig.yaml"
        - name: VKTOKENFILE
          value: "/opt/interlink/token"
        volumeMounts:
        - name: config
          mountPath: /etc/interlink/InterLinkConfig.yaml
          subPath: InterLinkConfig.yaml
        - name: token
          mountPath: /opt/interlink
        resources:
          limits:
            cpu: {{ .Values.inttwCpuLimit | default "2000m" }}
            memory: {{ .Values.inttwMemoryLimit | default "2Gi" }}
          requests:
            cpu: {{ .Values.inttwCpuRequest | default "100m" }}
            memory: {{ .Values.inttwMemoryRequest | default "200Mi" }}
      - name: refresh-token
        image: {{ .Values.inttwRefreshTokenImage | default "ghcr.io/intertwin-eu/interlink/virtual-kubelet-inttw-refresh:latest" }}
        imagePullPolicy: Always
        env:
          - name: IAM_TOKEN_ENDPOINT 
            value: {{ .Values.iamTokenEndpoint | default "https://iam.cloud.infn.it/token" | quote }}
          - name: IAM_CLIENT_ID
            value: {{ .Values.iamClientId | required "Please provide `iamClientId`" }}
          - name: IAM_CLIENT_SECRET
            value: {{ .Values.iamClientSecret | required "Please provide `iamClientSecret`" }}
          - name: IAM_GRANT_TYPE
            value: {{ .Values.iamGrantType | default "authorization_code" }}
          - name: IAM_REFRESH_TOKEN
            valueFrom:
              secretKeyRef:
                name: {{ .Values.nodeName }}-token
                key: refresh-token

          - name: IAM_VK_AUD
            value: {{ .Values.iamAudience | default "users" }}
          - name: TOKEN_PATH
            value: /opt/interlink/token
        command: 
          - python3
          - /opt/refresh.py

        resources:
          limits:
            cpu: {{ .Values.inttwRefreshTokenCpuLimit | default "200m" }}
            memory: {{ .Values.inttwRefreshTokenMemoryLimit | default "500Mi" }}
          requests:
            cpu: {{ .Values.inttwRefreshTokenCpuRequest | default "100m" }}
            memory: {{ .Values.inttwRefreshTokenMemoryRequest | default "300Mi" }}
        volumeMounts:
        - name: token
          mountPath: /opt/interlink
      serviceAccountName: {{ .Values.nodeName }}
      volumes:
      - name: config
        configMap:
          name: {{ .Values.nodeName }}-config
      - name: token
        emptyDir: 
          sizeLimit: 1M

---

