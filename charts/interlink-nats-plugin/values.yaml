# Deployment hostname with full domain, but without protocol
hostname: 
 

################################################################################
# InterLink configuration

# serverVersion is the version of the interlink release to retrieve from GitHub
serverVersion: 0.3.7

# serverPort is the internal port number to access the interLink server
serverPort: 30080

# sidecarName is the name of the service used to access the sidecar 
sidecarName: condor-plugin

# sidecarPort is the exposed port of the sidecar
sidecarPort: 80

# serverVerboseLogging if true enhance verbosity of the server
serverVerboseLogging: true

# serverErrorsOnlyLogging if true reduces the verbosity of the server
serverErrorsOnlyLogging: false

# serverExportPodData
serverExportPodData: true

  
################################################################################
# Ingress configuration

# serverPathPrefix is the reverse-proxy path prefix to reach server. WITHOUT SLASHES.
serverPathPrefix: condor

# certManagerEnabled if true, set up a certmanager for TLS termination
# IMPORTANT!!! Disable it if installing the chart in an already certified cluster
certManagerEnabled: true


# certManagerEmailAddress is the email address of the certificate owner
certManagerEmailAddress: 
 

################################################################################
# Authentication configuration

# oauth2ProxyImage is the docker image of the oauth2-proxy service
oauth2ProxyImage: "quay.io/oauth2-proxy/oauth2-proxy:v7.6.0"

# iamClientId is the Client ID of the IAM OIDC token issuer
oauth2ProxyIamClientId:

# iamClientSecret is the Client Secret of the IAM OIDC token issuer
oauth2ProxyIamClientSecret:

# oauth2ProxyPort is the internal port of the oauth2-proxy service
oauth2ProxyPort: 8000

# oauth2ProxyIamIssuer is the path to the IAM issuer passed to the oauth2-proxy
oauth2ProxyIamIssuer: "https://iam.cloud.infn.it/"

# oauth2ProxyTokenUrl is the path to the IAM issuer passed to the oauth2-proxy
oauth2ProxyTokenUrl: "https://iam.cloud.infn.it/token"

# oauth2ProxyIamGroupClaim is the json path in the returned token to retrieve the user's groups
oauth2ProxyIamGroupClaim: groups

# oauth2ProxyIamAllowedGroup is the IAM group whose user can access the interlink server
oauth2ProxyIamAllowedGroup: admins

# oauth2ProxyAudience is the audience in the token. Should be consistent with client setup
oauth2ProxyAudience: users
 
# oauth2ProxyCookieSecret is a random string used to encrypt the cookies
oauth2ProxyCookieSecret: 
 
################################################################################
# Plugin configuration

# pluginDocker image where to download from GitHub and run the condor-ce plugin
pluginImage: "landerlini/interlink-condorce-plugin:v0.1.2"

# pluginRepository is the git repository of the plugin, kept updated with git-sync
pluginRepository: "https://github.com/landerlini/interlink-condorce-plugin"

# pluginRepositoryBranch is the git revision (branch, tag or hash) to check out
pluginRepositoryBranch: "HEAD"

# pluginLivenessInitialDelaySeconds is the initial delay before prompting the plugin healthz.
pluginLivenessInitialDelaySeconds: 2
 
# pluginLivenessProbePeriodSeconds is the period ot ping to healtz 
pluginLivenessProbePeriodSeconds: 10

# pluginGitSyncPeriod is the frequency of the polling to git repository for updates
# As a rule of thumb, you can use a large value in production and shorten it for 
# faster turn-over while debugging. 
pluginGitSyncPeriod: 10s

# pluginLogLevel is the log level of uvicorn 
# see https://www.uvicorn.org/settings/#logging
pluginLogLevel: info

# pluginDebug enables additional debug messages and disable optimizations
pluginDebug: "true"

# pluginTokenValiditySeconds defines for how many seconds the token is considered as valid after refresh
pluginTokenValiditySeconds: 1200

# pluginCondorPool is the HTCondor collector, usually passed as value of the argument -pool to condor CLI
pluginCondorPool: "ce01t-htc.cr.cnaf.infn.it:9619"

# pluginSchedulerName is the HTCondor scheduler, usually passed as value of the argument -name to condor CLI
pluginCondorScheduler: "ce01t-htc.cr.cnaf.infn.it"

# pluginCondorAllocatable defines the allocatable resources of the remote plugin if not other information is available
pluginCondorAllocatable:
  cpu: 1
  memory: 2Gi
  pods: 10
  gpus: 0


# backendIamIssuer is the IAM issuer to authenticate against the HTCondor backend (via scitokens)
backendIamIssuer: "https://iam-t1-computing.cloud.cnaf.infn.it"

# backendIamClientId is the ClientID of the IAM used to authenticate against the HTCondor backend (via scitokens)
backendIamClientId:

# backendIamClientSecret is the Client password of the IAM used to authenticate against the HTCondor backend (scitokens)
backendIamClientSecret:

# backendIamAudience is the audience for the refreshed token (virtual-kubelet-inttw-refresh image)
backendIamAudience: https://wlcg.cern.ch/jwt/v1/any

# backendIamGrantType is the grant_type for the token refresher (virtual-kubelet-inttw-refresh image)
backendIamGrantType: authorization_code

# backendRefreshTokenCpuLimit is the limit to the cpu of the refresh-token service
backendRefreshTokenCpuLimit: 200m

# backendRefreshTokenMemoryLimit is the memory limit for the refresh-token servce
backendRefreshTokenMemoryLimit: 500Mi

# backendRefreshTokenCpuLimit is the limit to the cpu of the refresh-token service
backendRefreshTokenCpuRequest: 10m

# backendRefreshTokenMemoryLimit is the memory limit for the refresh-token servce
backendRefreshTokenMemoryRequest: 100Mi

# backendLocalImageDir is a directory where SIF images might be cached
# The path to SIF images should be {backendLocalImageDir}/{image.replace(":", "_")}
backendLocalImageDir: /opt/exp_software/opssw/budda

# backendShubProxy defines hostname:port (without protocol) of a SingularityHub Proxy
backendShubProxy:

# backendShubProxyMasterToken defines the ShubProxy Master Token used to obtain new tokens
backendShubProxyMasterToken:

# backendIamScope lists the scopes requested to the IAM
backendIamScopes:
  - openid
  - profile
  - offline_access
  - wlcg.groups
  - wlcg
  - compute.create
  - compute.modify
  - compute.read
  - compute.cancel

################################################################################
# NATS via SSH configuration

# natsBastionPort is the port of a bastion ssh service used to tunnel towards nats server
natsBastionPort: 30022

# natsBastionImage is the image of the bastion
natsBastionImage: binlab/bastion:latest

# natsAuthorizedKeys is the content of the authorized_keys files installed in the bastion service
natsBastionAuthorizedKeys:

# natsShutdownSubject is a subject used to trigger the shutdown (or restart) of plugins "attached" to a ggiven server.
# In a configuration with a single NATS server providing a messaging layers among multiple interlink servers
# and multiple resource providers, this subject is used to trigger the restart of the set of providers connected
# to the affected interlink server.
natsShutdownSubject: condor

# natsQueue is the queue of providers used to implement work balance in case of multiple equal providers
natsQueue: condor

# natsTimeoutSeconds is the time in seconds to await for a NATS response before failing. Larger to adsorb bigger peaks.
natsTimeoutSeconds: 60

# natsWebSocketUsername is the username of the nats server to access through the websocket interface. Mandatory.
natsWebSocketUsername:

# natsWebSocketPassword is the password of the nats server to access through the websocket interface. Mandatory.
natsWebSocketPassword:
